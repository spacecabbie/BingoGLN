#!/bin/bash

# Script to set up the bingo card generator project structure
# Creates directories, refactored BingoGenerator.php, placeholders, and basic configuration files

# Exit on error
set -e

# Define project directory
PROJECT_DIR="bingo"

# Create project directory structure
echo "Creating project directory structure..."
mkdir -p "$PROJECT_DIR/src/App/Src"
mkdir -p "$PROJECT_DIR/src/App/Interfaces"
mkdir -p "$PROJECT_DIR/views/admin"
mkdir -p "$PROJECT_DIR/assets"
mkdir -p "$PROJECT_DIR/storage/backgrounds"
mkdir -p "$PROJECT_DIR/backups"
mkdir -p "$PROJECT_DIR/migrations"
mkdir -p "$PROJECT_DIR/lang"
mkdir -p "$PROJECT_DIR/vendor" # For Composer dependencies

# Create src/App/Src/BingoGenerator.php
echo "Creating src/App/Src/BingoGenerator.php..."
cat << 'EOF' > "$PROJECT_DIR/src/App/Src/BingoGenerator.php"
<?php

declare(strict_types=1);

namespace App\Src;

use FPDF; // FPDF library, assumed to be available

/**
 * BingoGenerator class handles the core logic for generating bingo cards,
 * processing form submissions, and rendering the application.
 */
class BingoGenerator
{
    private BingoPDF $bingoPDF;
    private array $defaultValues = [
        'pages' => 1,
        'title' => 'Bingo Card',
        'bg_color' => '#FFFFFF', // Default white
        'text_color' => '#000000', // Default black
    ];
    private array $formData = [];
    private string $previewData = '';

    /**
     * Constructor for BingoGenerator.
     * Dependencies will be injected here for future features.
     *
     * @param BingoPDF $bingoPDF The PDF generator for bingo cards
     */
    public function __construct(BingoPDF $bingoPDF)
    {
        $this->bingoPDF = $bingoPDF;
        // Initialize form data with defaults
        $this->formData = $this->defaultValues;
    }

    /**
     * Handles the HTTP request (e.g., form submission) and processes it.
     *
     * @param array $postData The $_POST data from the form submission
     * @param array $filesData The $_FILES data for file uploads (future feature)
     * @return void
     */
    public function handleRequest(array $postData, array $filesData = []): void
    {
        if (empty($postData)) {
            return;
        }

        // Update form data with submitted values
        $this->formData['pages'] = isset($postData['pages']) ? (int)$postData['pages'] : $this->defaultValues['pages'];
        $this->formData['title'] = !empty($postData['title']) ? (string)$postData['title'] : $this->defaultValues['title'];
        $this->formData['bg_color'] = !empty($postData['bg_color']) ? (string)$postData['bg_color'] : $this->defaultValues['bg_color'];
        $this->formData['text_color'] = !empty($postData['text_color']) ? (string)$postData['text_color'] : $this->defaultValues['text_color'];

        // Generate a unique code for the bingo card (future: ensure uniqueness via database)
        $uniqueCode = $this->generateUniqueCode();

        // Future: Check user authentication and rate limiting
        // if (!$this->userManager->isLoggedIn()) {
        //     throw new \Exception('User must be logged in to generate bingo cards.');
        // }

        // Future: Save bingo card to database
        // $this->database->saveBingoCard(
        //     userId: $this->userManager->getCurrentUser()['id'],
        //     title: $this->formData['title'],
        //     numbers: $numbers, // Generated by NumberGenerator
        //     uniqueCode: $uniqueCode
        // );

        if (isset($postData['preview'])) {
            // Generate preview (1 page)
            $this->previewData = base64_encode($this->bingoPDF->generatePreview(
                $this->formData['title'],
                $this->formData['bg_color'],
                $this->formData['text_color'],
                $uniqueCode
            ));
        } elseif (isset($postData['generate'])) {
            // Generate PDF for download
            $this->generatePdf($uniqueCode);
            exit;
        }
    }

    /**
     * Generates a unique code for each bingo card.
     *
     * @return string The unique code
     */
    private function generateUniqueCode(): string
    {
        // Future: Use a more secure method (e.g., UUID or random_bytes with database check)
        return strtoupper(substr(md5(uniqid((string)mt_rand(), true)), 0, 8));
    }

    /**
     * Generates the PDF for download.
     *
     * @param string $uniqueCode The unique code for the bingo card
     * @return void
     */
    private function generatePdf(string $uniqueCode): void
    {
        $pages = $this->formData['pages'];
        $this->bingoPDF->setMargins(5, 5, 5);
        $usedNumbers = [];

        for ($p = 0; $p < $pages; $p++) {
            $this->bingoPDF->AddPage('P', 'A4');
            $positions = [
                [7.5, 23.5],
                [107.5, 23.5],
                [7.5, 158.5],
                [107.5, 158.5],
            ];

            for ($i = 0; $i < 4; $i++) {
                $this->bingoPDF->drawBingoCard(
                    $positions[$i][0],
                    $positions[$i][1],
                    $this->formData['title'],
                    $usedNumbers,
                    $this->formData['bg_color'],
                    $this->formData['text_color'],
                    $uniqueCode
                );
            }
        }

        $this->bingoPDF->Output('D', 'bingo_cards.pdf');
    }

    /**
     * Renders the application by returning the form data and preview data.
     *
     * @return array The data needed for rendering the view
     */
    public function render(): array
    {
        return [
            'formData' => $this->formData,
            'previewData' => $this->previewData,
            'defaultValues' => $this->defaultValues,
        ];
    }

    /**
     * Gets the default form values.
     *
     * @return array The default form values
     */
    public function getDefaultValues(): array
    {
        return $this->defaultValues;
    }
}

/**
 * BingoPDF class extends FPDF to generate bingo cards.
 * This will be moved to src/App/Src/BingoPDF.php later.
 */
class BingoPDF extends FPDF
{
    private array $ranges;

    public function __construct()
    {
        parent::__construct();
        $this->ranges = [
            'B' => range(1, 15),
            'I' => range(16, 30),
            'N' => range(31, 45),
            'G' => range(46, 60),
            'O' => range(61, 75),
        ];
    }

    private function generateBingoCard(): array
    {
        $card = [];
        foreach ($this->ranges as $letter => $numbers) {
            $shuffled = $numbers;
            shuffle($shuffled);
            $card[$letter] = array_slice($shuffled, 0, 5);
        }
        $card['N'][2] = '*'; // Placeholder for star symbol
        return $card;
    }

    public function drawBingoCard(
        float $x,
        float $y,
        string $title,
        array &$usedNumbers,
        string $bgColor,
        string $textColor,
        string $uniqueCode
    ): void {
        $card = $this->generateBingoCard();

        foreach (['B', 'I', 'N', 'G', 'O'] as $letter) {
            for ($i = 0; $i < 5; $i++) {
                if ($card[$letter][$i] !== '*') {
                    $attempts = 0;
                    $maxAttempts = 100;
                    while (in_array($card[$letter][$i], $usedNumbers) && $attempts < $maxAttempts) {
                        $card[$letter][$i] = $this->getUniqueNumber($this->ranges[$letter], $usedNumbers);
                        $attempts++;
                    }
                    if ($attempts >= $maxAttempts) {
                        $card[$letter][$i] = $this->findFirstAvailable($this->ranges[$letter], $usedNumbers);
                    }
                    if (!in_array($card[$letter][$i], $usedNumbers)) {
                        $usedNumbers[] = $card[$letter][$i];
                    }
                }
            }
        }

        // Convert hex colors to RGB
        $bgR = hexdec(substr($bgColor, 1, 2));
        $bgG = hexdec(substr($bgColor, 3, 2));
        $bgB = hexdec(substr($bgColor, 5, 2));
        $textR = hexdec(substr($textColor, 1, 2));
        $textG = hexdec(substr($textColor, 3, 2));
        $textB = hexdec(substr($textColor, 5, 2));

        // Draw the title with a border
        $this->SetFont('Arial', 'B', 12);
        $this->SetTextColor($textR, $textG, $textB);
        $this->SetXY($x, $y);
        $this->Cell(95, 10, $title, 1, 1, 'C');

        // Draw the unique code below the title
        $this->SetFont('Arial', '', 8);
        $this->SetXY($x, $y + 10);
        $this->Cell(95, 5, 'Code: ' . $uniqueCode, 0, 1, 'C');

        // Set line thickness to 0.4mm
        $this->SetLineWidth(0.4);

        // Draw the card grid
        $this->SetFont('Arial', 'B', 30); // BINGO letters at 30pt, bold
        $this->SetTextColor($textR, $textG, $textB);
        $this->SetFillColor($bgR, $bgG, $bgB);
        $this->SetXY($x, $y + 15);
        $this->Cell(19, 10, 'B', 1, 0, 'C', 1);
        $this->Cell(19, 10, 'I', 1, 0, 'C', 1);
        $this->Cell(19, 10, 'N', 1, 0, 'C', 1);
        $this->Cell(19, 10, 'G', 1, 0, 'C', 1);
        $this->Cell(19, 10, 'O', 1, 0, 'C', 1);

        $this->SetFont('Arial', 'B', 40); // Numbers at 40pt, bold
        for ($i = 0; $i < 5; $i++) {
            $this->SetXY($x, $y + 25 + ($i * 19));
            foreach (['B', 'I', 'N', 'G', 'O'] as $letter) {
                $this->Cell(19, 19, $card[$letter][$i], 1, 0, 'C', 1);
            }
        }

        // Reset colors and line width
        $this->SetTextColor(0, 0, 0);
        $this->SetFillColor(255, 255, 255);
        $this->SetLineWidth(0.2);
    }

    private function getUniqueNumber(array $range, array &$usedNumbers): int
    {
        $available = array_diff($range, $usedNumbers);
        if (empty($available)) {
            return reset($range);
        }
        return $available[array_rand($available)];
    }

    private function findFirstAvailable(array $range, array &$usedNumbers): int
    {
        foreach ($range as $num) {
            if (!in_array($num, $usedNumbers)) {
                return $num;
            }
        }
        return reset($range);
    }

    public function generatePreview(
        string $title,
        string $bgColor,
        string $textColor,
        string $uniqueCode
    ): string {
        $this->SetMargins(5, 5, 5);
        $this->AddPage('P', 'A4');
        $usedNumbers = [];

        $positions = [
            [7.5, 23.5],
            [107.5, 23.5],
            [7.5, 158.5],
            [107.5, 158.5],
        ];

        for ($i = 0; $i < 4; $i++) {
            $this->drawBingoCard(
                $positions[$i][0],
                $positions[$i][1],
                $title,
                $usedNumbers,
                $bgColor,
                $textColor,
                $uniqueCode
            );
        }

        return $this->Output('S');
    }
}
EOF

# Create placeholder files
echo "Creating placeholder files..."
touch "$PROJECT_DIR/index.php"
echo "<?php
// Main entry point for the bingo card generator
// TODO: Instantiate BingoGenerator and handle routing
" > "$PROJECT_DIR/index.php"

touch "$PROJECT_DIR/src/App/Src/BingoPDF.php"
echo "<?php
// Placeholder for BingoPDF class
// Will contain the FPDF extension for generating bingo cards
" > "$PROJECT_DIR/src/App/Src/BingoPDF.php"

touch "$PROJECT_DIR/src/App/Src/Database.php"
echo "<?php
// Placeholder for Database class
// Will handle MySQL connections and queries for bingo card history
" > "$PROJECT_DIR/src/App/Src/Database.php"

touch "$PROJECT_DIR/src/App/Src/UserManager.php"
echo "<?php
// Placeholder for UserManager class
// Will handle user authentication and management
" > "$PROJECT_DIR/src/App/Src/UserManager.php"

touch "$PROJECT_DIR/src/App/Src/NumberGenerator.php"
echo "<?php
// Placeholder for NumberGenerator class
// Will handle unique number generation for bingo cards
" > "$PROJECT_DIR/src/App/Src/NumberGenerator.php"

touch "$PROJECT_DIR/src/App/Src/ImageHandler.php"
echo "<?php
// Placeholder for ImageHandler class
// Will handle background image uploads and editing
" > "$PROJECT_DIR/src/App/Src/ImageHandler.php"

touch "$PROJECT_DIR/src/App/Src/RedisClient.php"
echo "<?php
// Placeholder for RedisClient class
// Will handle rate limiting for card generation
" > "$PROJECT_DIR/src/App/Src/RedisClient.php"

touch "$PROJECT_DIR/src/App/Src/BackupManager.php"
echo "<?php
// Placeholder for BackupManager class
// Will handle database backups and recovery
" > "$PROJECT_DIR/src/App/Src/BackupManager.php"

touch "$PROJECT_DIR/src/App/Interfaces/DatabaseInterface.php"
echo "<?php
// Placeholder for DatabaseInterface
// Will define methods for database operations
" > "$PROJECT_DIR/src/App/Interfaces/DatabaseInterface.php"

touch "$PROJECT_DIR/src/App/Interfaces/UserManagerInterface.php"
echo "<?php
// Placeholder for UserManagerInterface
// Will define methods for user management
" > "$PROJECT_DIR/src/App/Interfaces/UserManagerInterface.php"

touch "$PROJECT_DIR/src/App/Container.php"
echo "<?php
// Placeholder for Container class
// Will handle dependency injection
" > "$PROJECT_DIR/src/App/Container.php"

touch "$PROJECT_DIR/serve-image.php"
echo "<?php
// Placeholder for serve-image.php
// Will serve background images securely
" > "$PROJECT_DIR/serve-image.php"

touch "$PROJECT_DIR/validate-card.php"
echo "<?php
// Placeholder for validate-card.php
// Will validate bingo cards by unique code
" > "$PROJECT_DIR/validate-card.php"

# Create view placeholders
touch "$PROJECT_DIR/views/form.php"
echo "<!-- Placeholder for form.php -->" > "$PROJECT_DIR/views/form.php"

touch "$PROJECT_DIR/views/preview.php"
echo "<!-- Placeholder for preview.php -->" > "$PROJECT_DIR/views/preview.php"

touch "$PROJECT_DIR/views/login.php"
echo "<!-- Placeholder for login.php -->" > "$PROJECT_DIR/views/login.php"

touch "$PROJECT_DIR/views/register.php"
echo "<!-- Placeholder for register.php -->" > "$PROJECT_DIR/views/register.php"

touch "$PROJECT_DIR/views/history.php"
echo "<!-- Placeholder for history.php -->" > "$PROJECT_DIR/views/history.php"

touch "$PROJECT_DIR/views/validate.php"
echo "<!-- Placeholder for validate.php -->" > "$PROJECT_DIR/views/validate.php"

touch "$PROJECT_DIR/views/templates.php"
echo "<!-- Placeholder for templates.php -->" > "$PROJECT_DIR/views/templates.php"

touch "$PROJECT_DIR/views/admin/dashboard.php"
echo "<!-- Placeholder for admin/dashboard.php -->" > "$PROJECT_DIR/views/admin/dashboard.php"

touch "$PROJECT_DIR/views/status.php"
echo "<!-- Placeholder for status.php -->" > "$PROJECT_DIR/views/status.php"

# Create assets
touch "$PROJECT_DIR/assets/styles.css"
echo "/* Placeholder for styles.css */" > "$PROJECT_DIR/assets/styles.css"

touch "$PROJECT_DIR/assets/scripts.js"
echo "// Placeholder for scripts.js" > "$PROJECT_DIR/assets/scripts.js"

# Create language files
touch "$PROJECT_DIR/lang/en.php"
echo "<?php
// Placeholder for English translations
return [];
" > "$PROJECT_DIR/lang/en.php"

touch "$PROJECT_DIR/lang/es.php"
echo "<?php
// Placeholder for Spanish translations
return [];
" > "$PROJECT_DIR/lang/es.php"

# Create composer.json
echo "Creating composer.json..."
cat << EOF > "$PROJECT_DIR/composer.json"
{
    "name": "bingo/card-generator",
    "description": "Bingo card generator application",
    "require": {
        "php": "^8.0",
        "monolog/monolog": "^3.0",
        "vlucas/phpdotenv": "^5.4"
    },
    "autoload": {
        "psr-4": {
            "App\\\\": "src/App/"
        }
    }
}
EOF

# Create .env
echo "Creating .env..."
cat << EOF > "$PROJECT_DIR/.env"
# Environment configuration for bingo card generator
APP_ENV=development
DB_HOST=localhost
DB_USER=root
DB_PASS=
DB_NAME=bingo_db
UPLOAD_PATH=./storage/backgrounds/
EOF

# Create .gitignore
echo "Creating .gitignore..."
cat << EOF > "$PROJECT_DIR/.gitignore"
/vendor/
/.env
/storage/*
/backups/*
EOF

# Create README.md
echo "Creating README.md..."
cat << EOF > "$PROJECT_DIR/README.md"
# Bingo Card Generator

A PHP-based application for generating bingo cards with customizable features.

## Setup Instructions

1. Clone the repository:
   \`\`\`bash
   git clone <repository-url>
   cd bingo
   \`\`\`

2. Install dependencies:
   \`\`\`bash
   composer install
   \`\`\`

3. Copy the .env.example to .env and configure:
   \`\`\`bash
   cp .env.example .env
   \`\`\`

4. Set up the database:
   - Create a MySQL database named \`bingo_db\`.
   - Update database credentials in \`.env\`.

5. Run migrations (when implemented):
   \`\`\`bash
   php vendor/bin/phinx migrate
   \`\`\`

6. Start a development server:
   \`\`\`bash
   php -S localhost:8000
   \`\`\`

## Requirements

- PHP 8.0+
- MySQL 5.7+
- Composer

## Future Features

- MySQL history for bingo cards
- Unique number generation
- Background image uploads
- User authentication
- Unique code for fraud prevention
- History search

## License

MIT License
EOF

# Set permissions
echo "Setting permissions..."
chmod -R 755 "$PROJECT_DIR"
chmod -R 777 "$PROJECT_DIR/storage/backgrounds" # For uploads (adjust based on server config)
chmod -R 777 "$PROJECT_DIR/backups" # For backups (adjust based on server config)

# Run composer install (if composer is installed)
if command -v composer >/dev/null 2>&1; then
    echo "Running composer install..."
    cd "$PROJECT_DIR" && composer install
else
    echo "Composer not found. Please install Composer and run 'composer install' in the $PROJECT_DIR directory."
fi

# Future: Download FPDF library
# echo "Downloading FPDF library..."
# wget -O "$PROJECT_DIR/fpdf.php" http://www.fpdf.org/en/download.php
# Note: FPDF must be manually downloaded and placed in $PROJECT_DIR/fpdf.php for now

# Future: Set up database
# echo "Setting up database..."
# mysql -u root -p < create_database.sql
# Note: Database setup will be implemented later

echo "Project structure created successfully in $PROJECT_DIR!"
echo "Next steps:"
echo "- Download and place fpdf.php in $PROJECT_DIR/fpdf.php"
echo "- Create the other files (views, index.php, etc.) as needed"
echo "- Implement the Database, UserManager, NumberGenerator, and ImageHandler classes"