<?php

declare(strict_types=1);

namespace App\Src;

/**
 * BingoGenerator class handles the core logic for generating bingo cards,
 * processing form submissions, and rendering the application.
 */
class BingoGenerator
{
    private BingoPDF $bingoPDF;
    private array $defaultValues = [
        'pages' => 1,
        'title' => 'Bingo Card',
        'bg_color' => '#FFFFFF', // Default white
        'text_color' => '#000000', // Default black
    ];
    private array $formData = [];
    private string $previewData = '';

    /**
     * Constructor for BingoGenerator.
     * Dependencies will be injected here for future features.
     *
     * @param BingoPDF $bingoPDF The PDF generator for bingo cards
     */
    public function __construct(BingoPDF $bingoPDF)
    {
        $this->bingoPDF = $bingoPDF;
        // Initialize form data with defaults
        $this->formData = $this->defaultValues;
    }

    /**
     * Handles the HTTP request (e.g., form submission) and processes it.
     *
     * @param array $postData The $_POST data from the form submission
     * @param array $filesData The $_FILES data for file uploads (future feature)
     * @return void
     */
    public function handleRequest(array $postData, array $filesData = []): void
    {
        if (empty($postData)) {
            return;
        }

        // Update form data with submitted values
        $this->formData['pages'] = isset($postData['pages']) ? (int)$postData['pages'] : $this->defaultValues['pages'];
        $this->formData['title'] = !empty($postData['title']) ? (string)$postData['title'] : $this->defaultValues['title'];
        $this->formData['bg_color'] = !empty($postData['bg_color']) ? (string)$postData['bg_color'] : $this->defaultValues['bg_color'];
        $this->formData['text_color'] = !empty($postData['text_color']) ? (string)$postData['text_color'] : $this->defaultValues['text_color'];

        // Generate a unique code for the bingo card (future: ensure uniqueness via database)
        $uniqueCode = $this->generateUniqueCode();

        // Future: Check user authentication and rate limiting
        // if (!$this->userManager->isLoggedIn()) {
        //     throw new \Exception('User must be logged in to generate bingo cards.');
        // }

        // Future: Save bingo card to database
        // $this->database->saveBingoCard(
        //     userId: $this->userManager->getCurrentUser()['id'],
        //     title: $this->formData['title'],
        //     numbers: $numbers, // Generated by NumberGenerator
        //     uniqueCode: $uniqueCode
        // );

        if (isset($postData['preview'])) {
            // Generate preview (1 page)
            $this->previewData = base64_encode($this->bingoPDF->generatePreview(
                $this->formData['title'],
                $this->formData['bg_color'],
                $this->formData['text_color'],
                $uniqueCode
            ));
        } elseif (isset($postData['generate'])) {
            // Generate PDF for download
            $this->generatePdf($uniqueCode);
            exit;
        }
    }

    /**
     * Generates a unique code for each bingo card.
     *
     * @return string The unique code
     */
    private function generateUniqueCode(): string
    {
        // Future: Use a more secure method (e.g., UUID or random_bytes with database check)
        return strtoupper(substr(md5(uniqid((string)mt_rand(), true)), 0, 8));
    }

    /**
     * Generates the PDF for download.
     *
     * @param string $uniqueCode The unique code for the bingo card
     * @return void
     */
    private function generatePdf(string $uniqueCode): void
    {
        $pages = $this->formData['pages'];
        $this->bingoPDF->setMargins(5, 5, 5);
        $usedNumbers = [];

        for ($p = 0; $p < $pages; $p++) {
            $this->bingoPDF->AddPage('P', 'A4');
            $positions = [
                [7.5, 18.5], // Top-left
                [107.5, 18.5], // Top-right
                [7.5, 153.5], // Bottom-left
                [107.5, 153.5], // Bottom-right
            ];

            for ($i = 0; $i < 4; $i++) {
                $this->bingoPDF->drawBingoCard(
                    $positions[$i][0],
                    $positions[$i][1],
                    $this->formData['title'],
                    $usedNumbers,
                    $this->formData['bg_color'],
                    $this->formData['text_color'],
                    $uniqueCode
                );
            }
        }

        $this->bingoPDF->Output('D', 'bingo_cards.pdf');
    }

    /**
     * Renders the application by returning the form data and preview data.
     *
     * @return array The data needed for rendering the view
     */
    public function render(): array
    {
        return [
            'formData' => $this->formData,
            'previewData' => $this->previewData,
            'defaultValues' => $this->defaultValues,
        ];
    }

    /**
     * Gets the default form values.
     *
     * @return array The default form values
     */
    public function getDefaultValues(): array
    {
        return $this->defaultValues;
    }
}
